微服务技术

微服务属于分布式架构的一种


微服务第一步就是拆分，根据业务功能模块，将一个单体的项目拆分为许多的独立的项目 ，每一个项目称为服务，形成一个服务集群

1. 微服务架构的演变

单体架构，将业务的所有功能集中在一个项目中开发，打成一个包部署
优点：架构简单，部署成本低，加两集群，形成负载均衡即可
缺点：耦合度高，不利于大型项目开发

分布式架构，根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务
优点：耦合度低，有利于服务升级拓展
缺点：架构非常复杂，运维，监控，部署难度高


微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征：

单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发
面向服务：微服务对外暴露业务接口
自治：团队独立，技术独立，数据独立，部署独立
隔离性强：服务调用做好隔离，容错，降级，避免出现级联问题
 
做好高内聚，低耦合


微服务这种方案需要技术框架来落地，国内知名的就是springcloud和阿里巴巴的Dubbo

注册中心 +  配置中心 + 服务网关
                    Dubbo                Springcloud                    SpringcloudAlibaba
注册中心        zookeeper+redis             Eureka
服务远程调用    Dubbo协议                   Feign（http协议）
配置中心        无                          springcloudconfig
服务网关        无                          springcloudGateway zuul
服务监控和保护  dubbo-admin 功能弱          Hystrix

springcloud + feign


springcloud 集成了各种微服务功能组件，并基于Srpingboot实现了这些组件的自动装配，从而提供了良好的开箱即用体验

微服务拆分注意事项

1.不同微服务，不要重复开发相同业务
2.微服务数据独立，不要一个微服务访问另一个微服务的数据库
3.微服务可以将自己的业务暴露成一个接口，供其他微服务调用

不同的服务之间可以通过http进行接口的调用：new RestTemplate().getForObject/postForObject
getForObject(url, response.class)
postForObject(url, request, response.class)


微服务远程调用的提供者和消费者

服务提供者：一次业务中，被其他微服务调用的服务
服务消费者：一次业务中，调用其他微服务的服务


Eureka

Eureka-server 注册中心 注册和管理微服务
Eureka 客户端（服务提供者和服务消费者）
1.每一个服务时，在启动时都会先注册服务信息
2.消费者通过eureka拉取其他提供者服务信息
3.多个提供者，消费者如果选择？消费者利用负载均衡算法，从多个中选择一个
4.消费者远程调用提供者服务
（eureka每30s会进行一次心跳检测）


nacos 

从服务->  集群 -> 实例

NacosRule 负载均衡策略

优先选择同集群服务实例列表
本地集群都找不到时，才会其他集群寻找，并且会发出警告
确定了可用实例列表之后，再采用随机负载均衡选取实例

可以在nacos的前端页面修改实例的权重值 0-1之间
同集群内的多个实例，权重越高被访问的频率越高
权重设置为0则完全不会访问，可以利用这个特性进行平滑的系统升级

nanos 中服务存储和数据存储的最外层都是一个名为namespace的东西， 用来做最外层隔离，这个可以理解为不同的生产环境
namespace下面是Group，Group下面是Service/Data，不同namespace下面的服务不可见


nacos 与 eureka 对比

 1.都支持服务注册和服务拉取
 2.都支持服务提供者心跳方式做健康检测

 nacos支持服务端主动检测提供者状态，临时实例采用心跳检测，非临时实例采用主动检测模式
 临时实例心跳不正常会被删除，非临时实例则不会被剔除
 nacos支持服务列表变更的消息 推送模式，服务列表更新及时
 nacos集群默认采用AP方法，当集群中存在非临时实例时，采用CP模式，Eureka采用AP方式

